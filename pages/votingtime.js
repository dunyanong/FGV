import Head from "next/head";
import { useState, useEffect } from 'react';
import { auth, db } from "../utils/firebase";
import { useAuthState } from 'react-firebase-hooks/auth';
import { playerData } from '../data/data';
import Select from 'react-select';
import {
  addDoc,
  collection,
  doc,
  serverTimestamp,
  updateDoc,
  query,
  orderBy,
  limit,
  onSnapshot,
  setDoc,
  getDoc
} from "firebase/firestore";
import PlayerCard from '../components/PlayerCard';

const VoteTime = () => {
  const [user, loading] = useAuthState(auth);
  const [goatVote, setGoatVote] = useState(null);
  const [honorableMentionVote, setHonorableMentionVote] = useState(null);
  const [hasVoted, setHasVoted] = useState(false);

  const handleVote = async (e) => {
    // Prevent reload
    e.preventDefault();
    if (goatVote === null || honorableMentionVote === null) {
      return;
    }

    const goatPlayerRef = doc(db, 'votesCount', goatVote);
    const goatPlayerDoc = await getDoc(goatPlayerRef);
    const honorablePlayerRef = doc(db, 'votesCount', honorableMentionVote);
    const honorablePlayerDoc = await getDoc(honorablePlayerRef);

    // Tracks user's votes
    const docRef = doc(db, 'votes', user.uid);
    await setDoc(docRef, {
      goatVote: goatVote,
      honorableMentionVote: honorableMentionVote,
      user: {
        email: user.email,
        name: user.displayName
      },
      voteTime: serverTimestamp()
    });
  
  // Update vote count for goatVote
  if (goatPlayerDoc.exists() && goatPlayerDoc) {
    let previousCount = goatPlayerDoc.data().totalPoints;
    let goatVoteCounts = goatPlayerDoc.data().goatVoteCounts;

    if (typeof previousCount === 'number' && typeof goatVoteCounts === 'number') {
      const newGoatVoteCounts = goatVoteCounts + 1;
      await updateDoc(goatPlayerRef, {
        goatVoteCounts: newGoatVoteCounts,
        honorableMentionVoteCounts: honorableMentionVoteCounts,
        totalPoints: previousCount + 2
      });
    } else {
      console.error("Invalid vote count fields for goatVote");
      setHasVoted(false)
    }
  } else {
    await setDoc(goatPlayerRef, {
      footballplayer: goatVote,
      goatVoteCounts: 1,
      totalPoints: 2
    });
  }

  // Update vote count for honorableMentionVote
  if (honorablePlayerDoc.exists() && honorablePlayerDoc) {
    let previousCount = honorablePlayerDoc.data().totalPoints;
    let honorableMentionVoteCounts = honorablePlayerDoc.data().honorableMentionVoteCounts;

    if (typeof previousCount === 'number' && typeof honorableMentionVoteCounts === 'number') {
      const newHonorableMentionVoteCounts = honorableMentionVoteCounts + 1;
      await updateDoc(honorablePlayerRef, {
        goatVoteCounts: goatVoteCounts,
        honorableMentionVoteCounts: newHonorableMentionVoteCounts,
        totalPoints: previousCount + 1
      });
    } else {
      console.error("Invalid vote count fields for honorableMentionVote");
      setHasVoted(false)
    }
  } else {
    await setDoc(honorablePlayerRef, {
      footballplayer: honorableMentionVote,
      honorableMentionVoteCounts: 1,
      totalPoints: 1
    });
  }
  };

  useEffect(() => {
    if (!user) {
      return;
    }
    const votesRef = doc(db, 'votes', user.uid);
    const unsubscribe = onSnapshot(votesRef, (doc) => {
      if (doc.exists()) {
        setHasVoted(true);
      }
    });
    return unsubscribe;
  }, [user]);

  return (
    <div>
      <Head>
        <title>GoatVote</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
        <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
        <meta name="msapplication-TileColor" content="#da532c" />
        <meta name="theme-color" content="#ffffff" />
      </Head>
      <div className="container grid items-center justify-center gap-6 pt-20 md:pt-10 md:pb-12 lg:pt-8 lg:pb-10">
        <div className="flex-1 space-y-4">
          <h1 className="inline-block text-4xl font-extrabold tracking-tight text-slate-900 lg:text-5xl">Legendary Footballers ⚽</h1>
          <p className="text-xl text-slate-600">Vote for your favourite players!</p>
        </div>

        <hr className="py-8 border-slate-200" />
        
        {hasVoted ? (
            <h3 className="text-xl py-10 font-medium text-gray-900">
              You have inserted your vote!
            </h3>
          ) : (
            <form className="py-6 bg-white rounded-lg">
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900">Your GOAT 🐐</h2>
              <Select
                options={playerData.map(player => ({
                  value: player.legendName,
                  label: `${player.legendName} (${player.nationality})`
                }))}
                className="w-1/2 pt-2"
                onChange={selectedOption => setGoatVote(selectedOption.value)}
              />
            </div>
  
            <div className="mb-8">
              <h2 className="text-2xl font-bold text-gray-900">Your Honourable mention 🏆</h2>
              <Select
                options={playerData.map(player => ({
                  value: player.legendName,
                  label: `${player.legendName} (${player.nationality})`
                }))}
                className="w-1/2 pt-2"
                onChange={selectedOption => setHonorableMentionVote(selectedOption.value)}
              />
            </div>
            <button
                className="px-4 py-2 text-white bg-black rounded-lg hover:bg-slate-700"
                onClick={handleVote}
                disabled={goatVote === '' || honorableMentionVote === '' || hasVoted}
              >
                <span>Vote</span>
              </button>
          </form>
          )}

        <div className="grid gap-10 sm:grid-cols-2">
          {playerData.map((player) => (
            <PlayerCard key={player.index} player={player} />
          ))}
        </div>
      </div>
    </div>
  );  
}
 
export default VoteTime;